require("NLP")
## Some text.
s <- paste(c("Pierre Vinken, 61 years old, will join the board as a ",
"nonexecutive director Nov. 29.\n",
"Mr. Vinken is chairman of Elsevier N.V., ",
"the Dutch publishing group."),
collapse = "")
s <- as.String(s)
sent_token_annotator <- Maxent_Sent_Token_Annotator()
sent_token_annotator
library(openNLP)
library(rJava)
java -version
install.packages("rJava", type = "source")
install.packages("rJava", type = "source")
library(rJava)
install.packages("openNLP")
require(rJava)
pkg = c("ggplot2","tm", "SnowballC", "stringi", "stringr", "openNLP", "NLP", "qdap", "dplyr", "foreach")
new.pkg = pkg[!(pkg %in% installed.packages()[,"Package"])]
if (length(new.pkg)) {install.packages(new.pkg,dependencies = TRUE)}
sapply(pkg,require,character.only = TRUE)
require(rJava)
require(openNLP)
pkg = c("ggplot2","tm", "SnowballC", "stringi", "stringr", "openNLP", "NLP", "qdap", "dplyr", "foreach")
new.pkg = pkg[!(pkg %in% installed.packages()[,"Package"])]
if (length(new.pkg)) {install.packages(new.pkg,dependencies = TRUE)}
sapply(pkg,require,character.only = TRUE)
# Don't delete this chunk if you are using the DataComputing package
library(DataComputing)
includeSourceDocuments()
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = sum(count))
GlyphReadyForm %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line(size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
BabyNames
View(BabyNames)
dim(BabyNames)
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = sum(count))
GlyphReadyForm
GlyphReadyForm %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line(size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
?tally
tally(BabyNames)
tally(tally(BabyNames))
tally(PopNames)
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
nrow() %>%
group_by(name, year) %>%
summarize(total = sum(count))
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = 100 * sum(count) / nrow())
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = 100 * sum(count) / nrow)
# Don't delete this chunk if you are using the DataComputing package
library(DataComputing)
includeSourceDocuments()
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = 100 * sum(count) / nrow)
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = 100 * sum(count))
GlyphReadyForm %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line(size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
tally(BabyNames)
class(tally(BabyNames))
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = 100 * sum(count) / nrow(.))
GlyphReadyForm %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line(size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = sum(count) / nrow(.))
GlyphReadyForm %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line(size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
PopNames = c("Abraham", "Franklin", "Woodrow")
GlyphReadyForm  <- BabyNames %>%
filter(name %in% PopNames) %>%
group_by(name, year) %>%
summarize(total = sum(count))
GlyphReadyForm %>%
ggplot(aes(x = year, y = total, group = name)) +
geom_line(size = 1, alpha = 0.5, aes(color = name)) +
ylab("Popularity") + xlab("Year")
load(file.choose())
Library_Books_Information <- data.frame(names(Inv))
names(Library_Books_Information) <- "Information on Books in Library"
Library_Books_Information
All_Books_Titles <- Bks["Title"]
All_Books_Titles
Library_Books_Titles <- Inv["Title.or.Description"]
Library_Books_Titles
View(Bks)
View(Inv)
All_Books_Titles <- Bks["OCLC.Number"]
Library_Books_Titles <- Inv["OCLC.Number"]
All_Books_Titles$found <- Library_Books_Titles %in% All_Books_Titles
Overlap <-
All_Books_Titles %>%
filter(found==TRUE)
Overlap_Count <- data.frame(nrow(Overlap))
names(Overlap_Count) <- "Number of books from Bks in Library"
Overlap_Count
All_Books_Titles$found <- Library_Books_Titles %in% All_Books_Titles
All_Books_Titles$found
sum(All_Books_Titles$found)
All_Books_Titles$found <- All_Books_Titles %in% Library_Books_Titles
All_Books_Titles
All_Books_Titles$found <- Library_Books_Titles %in% All_Books_Titles
sum(All_Books_Titles$found)
All_Books_Titles%in%Library_Books_Titles
All_Books_Titles
All_Books_Titles <- Bks["OCLC.Number"]
Library_Books_Titles <- Inv["OCLC.Number"]
Library_Books_Titles <- as.vector(Inv["OCLC.Number"])
Library_Books_Titles
over <- All_Books_Titles %>%
filter(OCLC.Number %in% Library_Books_Titles)
All_Books_Titles%in%Library_Books_Titles
over
# Don't delete this chunk if you are using the DataComputing package
library(DataComputing)
library(printr)
install.packages(printt)
install.packages(printr)
install.packages('printr')
R.version
update.packages()
install.packages('printr')
updateR()
library(installr)
install.packages()
install.packages(installr)
install.packages('installr')
# Don't delete this chunk if you are using the DataComputing package
library(DataComputing)
#library(printr)
includeSourceDocuments()
set.seed(123)
d <- diamonds[sample(nrow(diamonds), 1000), ]
head(d)
?sample
ggplot(data = d, aes(x = carat, y = price)) +
geom_point( size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut) +
labs(title = "Diamonds", x = "Carat", y = "Price") +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(colour = "red", size = 15),
plot.title = element_text(size = 30, colour = "blue"),
axis.title.x = element_text(size = 20, colour = "red"),
axis.title.y = element_text(size = 20, colour = "red"))
?facet_wrap
ggplot(data = d, aes(x = carat, y = price)) +
geom_point( size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut) +
labs(title = "Diamonds", x = "Carat", y = "Price") +
ggplot(data = d, aes(x = carat, y = price)) +
geom_point( size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut) +
labs(title = "Diamonds", x = "Carat", y = "Price")
?theme
?aes
??color
?geom_smooth
?theme
geom_smooth()
?geom_smooth
download.file("http://tiny.cc/dcf/ScorecardSmall.Rda", destfile = "~/ScorecardSmall.Rda")
load("~/ScorecardSmall.Rda")
# Don't delete this chunk if you are using the DataComputing package
library(DataComputing)
includeSourceDocuments()
head(ScorecardSmall)
View(ScorecardSmall)
library("tidyr")
ScorecardSmall_wide <- ScorecardSmall %>% select(ADM_RATE, NPT41_PUB,NPT43_PUB,NPT45_PUB, NPT41_PRIV, NPT43_PRIV, NPT45_PRIV, INSTNM, CONTROL, CCSIZSET)
View(ScorecardSmall_wide)
library("tidyr")
ScorecardSmall_narrow <- ScorecardSmall_wide %>%
gather(key=NPT4, value = value, NPT41_PUB, NPT41_PRIV, NPT43_PUB, NPT43_PRIV, NPT45_PUB, NPT45_PRIV)
head(ScorecardSmall_narrow)
View(ScorecardSmall_narrow)
NPT4_names <- read.csv("http://tiny.cc/dcf/NPT4-names.csv/")
head(NPT4_names)
scorecard_join <- ScorecardSmall_narrow %>% inner_join(NPT4_names,by=c("NPT4"= "long_name"))
head(scorecard_join)
# here I make NPT4 variable Public or Private depending on the code. You can do this using the CONTROL varaible also. For example: mutate(CONTROL = ifelse(CONTROL==1, "Public", "Private")) but I didn't think of this at the time.
scorecard_join$NPT4[scorecard_join$NPT4 %in% c("NPT41_PUB", "NPT43_PUB","NPT45_PUB") ] <- "Public"
scorecard_join$NPT4[scorecard_join$NPT4 %in% c("NPT41_PRIV", "NPT43_PRIV","NPT45_PRIV") ] <- "Private"
head(scorecard_join)
scorecard_clean <- scorecard_join %>%
mutate(value=value/1000, ADM_RATE=ADM_RATE*100) %>%
filter(ADM_RATE!=100, ! (CCSIZSET %in% c(1,6,7,8)), CONTROL != 3)
View(scorecard_clean)
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
scorecard_clean %>% ggplot(aes(x=ADM_RATE,y=value)) + geom_point(colour="blue",alpha=.2) + facet_grid(NPT4 ~short_name ) +ylim(0,50) + xlim(5,100) + geom_smooth(colour="red") +labs(x="Admission rate, %", y="Net cost per year, $'000", title="Score Card") + theme_igray() + theme(plot.title = element_text(size = 25, colour = "black"),
axis.title.x = element_text(size = 15, colour = "black"),
axis.title.y = element_text(size = 15, colour = "black"))
View(ScorecardSmall_wide)
ScorecardSmall_narrow['Utica College']
ScorecardSmall_narrow['Utica College',]
ScorecardSmall_narrow['University of Alabama',]
?where
??where
?which
which(ScorecardSmall_narrow$INSTNM == 'Utica College')
library(DataComputing)
includeSourceDocuments()
x <- 1 # Change this value!
if (x > 0) {
print("positive")
} else {
print("not positive")
}
y <- 1 # Change this value!
if (y > 0) {
print("positive")
} else if (y < 0) {
print("negative")
} else {
print("zero?")
}
z <- 100*pi
if (z < 0) { # Replace TRUE with a condition.
z <- 0
} else if (z > 100) { # Replace TRUE with a condition.
z <- 100
}
print(z)
val_while <- 898128000 # Change this value!
while (val_while %% 2 == 0) { # Continue the loop as long as val_while is even.
print(val_while)
val_while <- val_while / 2
}
print(val_while)
while (val_while %% 2 == 0) { # Continue the loop as long as val_while is even.
print(val_while)
val_while <- val_while / 2
}
print(val_while)
n_rep <- 314 # Change this value!
reduce <- function(x) {
while(x %% 2 == 0) {
x <- x/2
}
return(x)
}
reduce(898128000)
reduce <- function(x) {
while(x %% 2 == 0) {
x <- x/2
}
print(x)
}
reduce(898128000)
class(reduce(898128000))
reduce(898128000) + 1
vec <- c(3, 1, 4)
for (j in 1:length(vec)) {
if(j == 1) {
vec[j] = vec[j] + 1
} else if (j == 2) {
vec[j] = vec[j] - 1
} else {
vec[j] = 2* vec[j]
}
}
print(vec)
vec <- c(3, 1, 4)
for (j in 1:length(vec)) {
vec[j] = vec[j] + 1
}
print(vec)
sumDice <- function() {
return(sum(sample(1:6, 3)))
}
sumDice
sumDice <- function() {
return(sum(sample(1:6, 3)))
}
sumDice()
simSumDice <- function(B) {
dice <- vector()
for (i in 1:B) {
dice <- append(dice, sumDice())
}
return(dice)
}
simSumDice(5)
sumVector <- simSumDice(5000)
plot(sumVector)
library(ggthemes)
sums <- simSumDice(10000)
df <- data.frame(sums)
head(df,3)
df %>% ggplot(aes(sums)) + geom_bar() +labs(title="distribution for sum of three rolls of a die") + theme_igray() + scale_x_discrete(limit = 6:15)
library(ggthemes)
sums <- simSumDice(5000)
ggplot(aes(sums))
library(ggthemes)
sums <- data.frame(simSumDice(5000))
sums <- data.frame(simSumDice(5000))
head(df,3)
sums %>% ggplot(aes(sums[,1])) + geom_bar() +labs(title="distribution for sum of three rolls of a die") + theme_igray() + scale_x_discrete(limit = 6:15)
sums %>% ggplot(aes(sums)) + geom_bar() +labs(title="distribution for sum of three rolls of a die") + theme_igray() + scale_x_discrete(limit = 6:15)
simSumDice <- function(B) {
dice <- vector()
for (i in 1:B) {
dice <- append(dice, sumDice())
}
return(dice)
}
simSumDice(5)
z <- 100*pi
if (z < 0) { # Replace TRUE with a condition.
z <- 0
} else if (z > 100) { # Replace TRUE with a condition.
z <- 100
}
print(z)
n_rep <- 314 # Play with this value! Does your code behave as expected?
repeat {
if(n_rep <= 10000) {
n_rep <- 3*n_rep + 1
}
}
n_rep <- 314 # Play with this value! Does your code behave as expected?
repeat {
if(n_rep <= 10000) {
n_rep <- 3*n_rep + 1
} else {
return(n_rep)
}
}
n_rep <- 314 # Play with this value! Does your code behave as expected?
repeat {
if(n_rep <= 10000) {
n_rep <- 3*n_rep + 1
} else {
print(n_rep)
}
}
n_rep <- 314 # Play with this value! Does your code behave as expected?
repeat {
if(n_rep <= 10000) {
n_rep <- 3*n_rep + 1
} else {
print(n_rep)
break
}
}
n_rep
n_while <- 314 # Play with this value! Does your code behave as expected?
n_while <- 314 # Play with this value! Does your code behave as expected?
while (n_while <= 10000) { # Replace FALSE with your stopping condition.
n_while <- 3 * n_while + 1
}
n_white
n_while
f <- function(n) {
if (n %% 2 == 0) {
return(n/2)
} else {
return(3 * n + 1)
}
}
f(6)        # Should return 3
f(19)       # Should return 58
f(27)       # Should return 82
g <- function(n) {
iter <- 1
while(n != 1) {
iter++
n <- f(n)
}
return(iter)
}
g(6)        # Should return 8
g <- function(n) {
iter <- 1
while(n != 1) {
iter <- iter + 1
n <- f(n)
}
return(iter)
}
g(6)        # Should return 8
g(19)       # Should return 20
g <- function(n) {
iter <- 0
while(n != 1) {
iter <- iter + 1
n <- f(n)
}
return(iter)
}
g(6)        # Should return 8
g(19)       # Should return 20
g(27)       # Should return 111
h <- function(n) {
f <- function(m) {
if (m %% 2 == 0) {
return(m/2)
} else {
return(3 * m + 1)
}
}
iter <- 0
while(n != 1) {
iter <- iter + 1
n <- f(n)
}
return(iter)
}
h(19)       # Should return 20
h(27)       # Should return 111
h(6)        # Should return 8
h(19)       # Should return 20
h(27)       # Should return 111
a <- 1:5
a^2
powersum <- function(vec, pow) { # Fill in arguments.
vec <- vec^pow
return(vec)
}
powersum(1:5)       # Should return 55.
powersum <- function(vec, pow=2) { # Fill in arguments.
vec <- vec^pow
return(vec)
}
powersum(1:5)       # Should return 55.
powersum(1:5, 4)    # Should return 979.
powersum <- function(vec, pow=2) { # Fill in arguments.
for(i in 1:length(vec)) {
vec[i] <- vec[i]^pow
}
return(vec)
}
powersum(1:5)       # Should return 55.
powersum(1:5, 4)    # Should return 979.
powersum <- function(vec, pow=2) { # Fill in arguments.
for(i in 1:length(vec)) {
vec[i] <- vec[i]^pow
}
return(sum(vec))
}
powersum(1:5)       # Should return 55.
powersum(1:5, 4)    # Should return 979.
setwd('~/coding/ec142/Ec142_Spring2017/ps/ps1/')
ps <- read.table('ps1_data.txt', sep = '  ')
head(ps)
ps <- read.table('ps1_data.txt', sep = "  ")
ps <- read.table('ps1_data.txt', sep = "")
head(ps)
ps <- read.table('ps1_data.txt', sep = "", header = TRUE)
head(ps)
class(ps)
?data.frame
ps$Cost..m./ps$FuelPrice
ols_data <- data.frame(y = log(ps$Cost..m./ps$FuelPrice),
cp_fp = ps$CapitalPrice/ps$FuelPrice,
log_output = log(ps$Output.mKWH.),
wage_fp = ps$Wage/ps$FuelPrice,)
ols_data <- data.frame(log(ps$Cost..m./ps$FuelPrice),
ps$CapitalPrice/ps$FuelPrice,
log(ps$Output.mKWH.),
ps$Wage/ps$FuelPrice,)
data.frame(1, 1:10, sample(L3, 10, replace = TRUE))
data.frame(1, 1:10, sample(1:3, 10, replace = TRUE))
ols_data <- data.frame(y = log(ps$Cost..m./ps$FuelPrice),
cp_fp = ps$CapitalPrice/ps$FuelPrice,
log_output = log(ps$Output.mKWH.),
wage_fp = ps$Wage/ps$FuelPrice)
head(ols_data)
reg <- lm(y ~ ., data=ols_data)
summary(reg)
